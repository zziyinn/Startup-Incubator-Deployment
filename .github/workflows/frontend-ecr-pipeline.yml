name: Frontend ECR Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ecr-pipeline.yml'
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and Push Frontend Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names frontend-repo || \
          aws ecr create-repository --repository-name frontend-repo --image-scanning-configuration scanOnPush=true
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-frontend
          key: ${{ runner.os }}-buildx-frontend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-frontend-
      
      - name: Setup temporary frontend application
        run: |
          mkdir -p temp-frontend-app
          cd temp-frontend-app
          
          # Create a simple package.json
          cat > package.json << 'EOF'
          {
            "name": "startup-incubator-frontend",
            "version": "1.0.0",
            "private": true,
            "scripts": {
              "build": "mkdir -p build && echo '<html><body><h1>Startup Incubator</h1><p>Frontend Placeholder</p></body></html>' > build/index.html"
            },
            "dependencies": {}
          }
          EOF
          
          # Create a simple Dockerfile
          cat > Dockerfile << 'EOF'
          FROM node:18-alpine as builder
          WORKDIR /app
          COPY . .
          RUN npm install
          RUN npm run build
          
          FROM nginx:alpine
          COPY --from=builder /app/build /usr/share/nginx/html
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOF
          
          echo "Temporary frontend application created successfully"
      
      - name: Build, tag, and push frontend image to ECR
        working-directory: ./temp-frontend-app
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push using Docker Buildx
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache-frontend \
            --cache-to=type=local,dest=/tmp/.buildx-cache-frontend-new,mode=max \
            --platform linux/amd64 \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            .
          
          # Move cache to prevent growing indefinitely
          rm -rf /tmp/.buildx-cache-frontend
          mv /tmp/.buildx-cache-frontend-new /tmp/.buildx-cache-frontend
          
          echo "Frontend image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Frontend image also tagged as: $ECR_REGISTRY/$ECR_REPOSITORY:latest"
      
      - name: Notify success
        if: success()
        run: |
          echo "âœ… Frontend Docker image successfully pushed to ECR"
          echo "Repository: frontend-repo"
          echo "Tag: ${{ github.sha }}" 